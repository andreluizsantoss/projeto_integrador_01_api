generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model atividadesfixas {
  codigo              String                @id @db.VarChar(10)
  descricao           String                @db.VarChar(255)
  historicoatividades historicoatividades[]
}

model beneficiosfixos {
  codigo             String               @id @db.VarChar(10)
  descricao          String               @db.VarChar(255)
  beneficiospaciente beneficiospaciente[]
}

model beneficiospaciente {
  id               Int              @id @default(autoincrement())
  cadastro_id      Int
  codigo_beneficio String?          @db.VarChar(10)
  cadastro         cadastro         @relation(fields: [cadastro_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "beneficiospaciente_ibfk_1")
  beneficiosfixos  beneficiosfixos? @relation(fields: [codigo_beneficio], references: [codigo], onDelete: NoAction, onUpdate: NoAction, map: "beneficiospaciente_ibfk_2")

  @@index([cadastro_id], map: "cadastro_id")
  @@index([codigo_beneficio], map: "codigo_beneficio")
}

model cadastro {
  id                   Int                     @id @default(autoincrement())
  nome                 String                  @db.VarChar(255)
  idade                Int
  documento            String                  @unique(map: "documento") @db.VarChar(20)
  data_nascimento      DateTime                @db.Date
  sexo                 cadastro_sexo
  estado_civil         cadastro_estado_civil
  profissao            String?                 @db.VarChar(100)
  morador_rua          Boolean?
  status               cadastro_status
  cor_olhos            String?                 @db.VarChar(50)
  cor_cabelo           String?                 @db.VarChar(50)
  altura               Decimal?                @db.Decimal(5, 2)
  peso                 Decimal?                @db.Decimal(5, 2)
  etnia                String?                 @db.VarChar(50)
  codigo_usuario       String?                 @unique(map: "codigo_usuario") @db.VarChar(50)
  tipo_documento       cadastro_tipo_documento
  beneficiospaciente   beneficiospaciente[]
  dependenciaspaciente dependenciaspaciente[]
  historicoatividades  historicoatividades[]
}

model dependenciasfixas {
  codigo               String                 @id @db.VarChar(10)
  descricao            String                 @db.VarChar(255)
  dependenciaspaciente dependenciaspaciente[]
}

model dependenciaspaciente {
  id                 Int                @id @default(autoincrement())
  cadastro_id        Int
  codigo_dependencia String?            @db.VarChar(10)
  cadastro           cadastro           @relation(fields: [cadastro_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "dependenciaspaciente_ibfk_1")
  dependenciasfixas  dependenciasfixas? @relation(fields: [codigo_dependencia], references: [codigo], onDelete: NoAction, onUpdate: NoAction, map: "dependenciaspaciente_ibfk_2")

  @@index([cadastro_id], map: "cadastro_id")
  @@index([codigo_dependencia], map: "codigo_dependencia")
}

model historicoatividades {
  id               Int              @id @default(autoincrement())
  cadastro_id      Int
  codigo_atividade String?          @db.VarChar(10)
  data_atendimento DateTime         @db.Date
  cadastro         cadastro         @relation(fields: [cadastro_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "historicoatividades_ibfk_1")
  atividadesfixas  atividadesfixas? @relation(fields: [codigo_atividade], references: [codigo], onDelete: NoAction, onUpdate: NoAction, map: "historicoatividades_ibfk_2")

  @@index([cadastro_id], map: "cadastro_id")
  @@index([codigo_atividade], map: "codigo_atividade")
}

model usuario {
  id            Int     @id @default(autoincrement())
  usuario       String  @unique(map: "usuario_UNIQUE") @db.VarChar(80)
  senha         String  @db.VarChar(20)
  refresh_token String? @db.Text
  status        String  @db.VarChar(15)
}

enum cadastro_sexo {
  Masculino
  Feminino
  Outro
}

enum cadastro_estado_civil {
  Solteiro
  Casado
  Divorciado
  Vi_vo      @map("Vi√∫vo")
  Outro
}

enum cadastro_status {
  Ativo
  Bloqueado
}

enum cadastro_tipo_documento {
  RG
  CPF
}
